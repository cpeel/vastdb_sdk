variables:
  DOCKER_REGISTRY: 110450271409.dkr.ecr.eu-west-1.amazonaws.com
  ORION_PREFIX: $DOCKER_REGISTRY/dev/orion
  PYSDK_BUILDER_IMAGE: $ORION_PREFIX:vastdb-python-sdk-builder-latest
  PYSDK_IMAGE_PREFIX: $ORION_PREFIX:vastdb-python-sdk-pipe-$CI_PIPELINE_ID
  ORION_BRANCH: BUILD/roman.zeyde/pysdk-ci-job-upstream


pre_build:
  stage: .pre
  script:
    - aws ecr get-login-password | docker login -u AWS --password-stdin https://$DOCKER_REGISTRY
    - docker build -f Dockerfile.prebuild -t $PYSDK_BUILDER_IMAGE .
    - docker push $PYSDK_BUILDER_IMAGE
  rules:
    - changes:
      - Dockerfile.prebuild
  tags:
    - code-builder-small-shell


build_and_publish:
  stage: build
  interruptible: true
  image: $PYSDK_BUILDER_IMAGE
  tags:
    - vast-dev-builder

  variables:
    VASTDB_APPEND_VERSION_SUFFIX: 'true'
    PYSDK_IMAGE: ${PYSDK_IMAGE_PREFIX}-${PYTHON_VERSION}

  script:
    - echo "Building $PYSDK_IMAGE..."
    - docker build -f Dockerfile --build-arg BASE_IMAGE=python:${PYTHON_VERSION} -t $PYSDK_IMAGE .
    - docker inspect $PYSDK_IMAGE

    - echo "Testing $PYSDK_IMAGE..."
    - docker run --rm $PYSDK_IMAGE ruff check vastdb/

    - echo "Publishing $PYSDK_IMAGE..."
    - docker push $PYSDK_IMAGE

    - if [ "$PYTHON_VERSION" = "3.9" ]; then
        echo "Publishing artifacts...";
        docker run
          -e ARTIFACTORY_URL=$ARTIFACTORY_URL
          -e ARTIFACTORY_JF_USER=$ARTIFACTORY_JF_USER
          -e ARTIFACTORY_JF_PW=$ARTIFACTORY_JF_PW
          -e CI_PIPELINE_ID=$CI_PIPELINE_ID
          -e CI_PROJECT_NAME=$CI_PROJECT_NAME
          $PYSDK_IMAGE ./upload.sh;
      fi
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.9', '3.10', '3.11', '3.12']


test_orion [latest]:
  stage: test
  when: always
  trigger:
    project: dev/orion
    branch: $ORION_BRANCH
    strategy: depend
  allow_failure: true
  variables:
    PYSDK_IMAGE_PREFIX: $ORION_PREFIX:vastdb-python-sdk-pipe-$CI_PIPELINE_ID
